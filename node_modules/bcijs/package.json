{
  "_args": [
    [
      {
        "raw": "bcijs",
        "scope": null,
        "escapedName": "bcijs",
        "name": "bcijs",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Ajay\\Documents\\Neuroflow"
    ]
  ],
  "_from": "bcijs@latest",
  "_hasShrinkwrap": false,
  "_id": "bcijs@1.5.1",
  "_inCache": true,
  "_location": "/bcijs",
  "_nodeVersion": "10.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/bcijs_1.5.1_1546365630393_0.13953754731977797"
  },
  "_npmUser": {
    "name": "pwstegman",
    "email": "pwstegman@gmail.com"
  },
  "_npmVersion": "6.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bcijs",
    "scope": null,
    "escapedName": "bcijs",
    "name": "bcijs",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/bcijs/-/bcijs-1.5.1.tgz",
  "_shasum": "abf0cc7436d1dc9ecc7a9eda82ab3b1651e1cb18",
  "_shrinkwrap": null,
  "_spec": "bcijs",
  "_where": "C:\\Users\\Ajay\\Documents\\Neuroflow",
  "author": {
    "name": "Pierce Stegman",
    "email": "pwstegman@gmail.com",
    "url": "https://github.com/pwstegman"
  },
  "browserslist": "> 0.25%, not dead",
  "bugs": {
    "url": "https://github.com/pwstegman/bcijs/issues"
  },
  "config": {
    "puppeteer_skip_chromium_download": true
  },
  "dependencies": {
    "csvtojson": "^1.1.12",
    "easy-table": "^1.1.1",
    "edfjs": "^0.2.0",
    "fast-csv": "^2.4.1",
    "fft.js": "^4.0.3",
    "mathjs": "^3.20.2",
    "node-osc": "^2.1.0",
    "numeric": "^1.2.6",
    "pw-csp": "^1.0.1",
    "pw-lda": "^1.0.2",
    "pw-stat": "^1.0.1"
  },
  "description": "EEG signal processing and machine learning",
  "devDependencies": {
    "@babel/core": "^7.2.2",
    "@babel/preset-env": "^7.2.3",
    "app-root-path": "^2.1.0",
    "babelify": "^10.0.0",
    "browserify": "^16.2.3",
    "docdash": "^0.4.0",
    "fs-then-native": "^2.0.0",
    "glob": "^7.1.3",
    "gulp": "^4.0.0",
    "gulp-concat": "^2.6.1",
    "gulp-header-comment": "^0.4.0",
    "gulp-hub": "^4.2.0",
    "gulp-jsdoc3": "^2.0.0",
    "gulp-rename": "^1.2.2",
    "gulp-uglify-es": "^1.0.1",
    "jsdoc": "^3.5.5",
    "jsdoc-to-markdown": "^4.0.1",
    "mocaccino": "^3.0.0",
    "mocha": "^4.1.0",
    "nyc": "^12.0.2",
    "tmp": "0.0.33",
    "upath": "^1.1.0",
    "vinyl-buffer": "^1.0.1",
    "vinyl-source-stream": "^2.0.0"
  },
  "directories": {
    "lib": "lib"
  },
  "dist": {
    "integrity": "sha512-AbkIzV+j7yTdBMedfXmzMavIbkjOm9KoWXX+33IbS3JIuzC65g1RBOc5XzPhBxhv+gU3Z0vNzG43IrvFgW4kbg==",
    "shasum": "abf0cc7436d1dc9ecc7a9eda82ab3b1651e1cb18",
    "tarball": "https://registry.npmjs.org/bcijs/-/bcijs-1.5.1.tgz",
    "fileCount": 50,
    "unpackedSize": 1665660,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcK6q+CRA9TVsSAnZWagAACX8P/1/GowU7rnlIl1PAiWSX\nKd8GeXFo4VYIwqZ0qdYz/KAWm6vsyuxsGQ8p13I1+xC8DwgAApHVC5ZvW9Rc\nP05X+aV8crdNPFRGNT/sLvRinfCzqVnwNp3lxkBoNXItO59dWG715YuFaJEu\nM5Snvh8Md5N06HhtT+qeelpiolLcH7wcvBfX7G914k+B8PL/S/nPS4Yq5G4m\nQ0xzrANphbFmBxeGGpEf4Hlx/7IrksiQ8y9DAXUBFz+SQSlsZH4DnmXAgSHT\ntITc1JesX5vlcGbWkcQED5wahANg1UHt7x/PbphDZR1C1xcCIw7SBCWm5WZR\ntx1Zo2OaQv6YAC3h8mucO+RcjS8I96g9wOnb6Rp7HDdxY9s749R222LXQAbz\nxNRPE5o73OTtMBlkjgR6AifBTwmfDMn+Ej4cjNSd8KqJ6p0+RWh+x5T0pMQ5\nnQXAZu7CCsfLut33ddhnU2k5YE5N9MDx9G+Mo1u95+x956q5FcLzEsn501jC\nymuvDeGoZp9TMXYUeZU37YSedqi+Vfuwv8jPUMVrncjoNwCwLjtyyuFe48sh\nu3DmEvt8GDKnmS/XyOAa60f254TCN4EbfluwDurtsNVwgCf8h7pvmCxxfmM1\nGFYjtdoNiG6w24HfdW3DsJH1Zo7sEQ5z4pP8xkiP92ZiRcLefVzuq2KQdNMY\nDy2F\r\n=QlnG\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "ac63376e4070b80942245be8e02f7d4fb76fdf17",
  "homepage": "https://github.com/pwstegman/bcijs#readme",
  "keywords": [
    "eeg",
    "bci",
    "signal processing",
    "machine learning",
    "math"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "pwstegman",
      "email": "pwstegman@gmail.com"
    }
  ],
  "name": "bcijs",
  "optionalDependencies": {},
  "readme": "<p><img src=\"static/bcijs-logo.png\" height=\"68px\"></p>\r\n\r\n[![npm](https://img.shields.io/npm/v/bcijs.svg)](https://www.npmjs.com/package/bcijs)\r\n[![npm](https://img.shields.io/npm/dm/bcijs.svg)](https://www.npmjs.com/package/bcijs)\r\n[![NpmLicense](https://img.shields.io/npm/l/bcijs.svg)](https://github.com/pwstegman/bcijs/blob/master/LICENSE)\r\n\r\nBCI.js is a library for EEG-based brain computer interface (BCI) design with JavaScript and Node.js. It allows for the creation of BCI enabled web apps or Node.js applications, containing methods for signal processing and machine learning, such as LDA, CSP, ICA, and PSD, methods for data manipulation, such as MATLAB style array subscripting, data windowing, and CSV file support, and methods for networking, including data collection and streaming via OSC.\r\n\r\nBCI.js is being developed out of the Human Technology Interaction Lab at the University of Alabama Department of Computer Science.\r\n\r\n## Getting Started\r\n\r\nNode.js\r\n\r\n```bash\r\nnpm install bcijs\r\n```\r\n\r\nBrowser\r\n\r\n```html\r\n<script src=\"https://cdn.jsdelivr.net/npm/bcijs@1.5.1/dist/bci.min.js\"></script>\r\n```\r\n\r\n## Examples\r\n\r\n### Signal Processing\r\n\r\n```javascript\r\nconst bci = require('bcijs');\r\n\r\n// Generate 1 second of sample data\r\nlet sampleRate = 512;\r\nlet duration = 1;\r\nlet amplitudes = [1, 2, 4, 8];\r\nlet frequencies = [\r\n\t1, // 1 Hz, delta range\r\n\t5, // 5 Hz, theta range\r\n\t8, // 8 Hz, alpha range\r\n\t17 // 17 Hz, beta range\r\n];\r\n\r\nlet signal = bci.generateSignal(amplitudes, frequencies, sampleRate, duration);\r\n\r\n// Compute average power in each frequency band\r\nlet fftSize = sampleRate * duration;\r\nconsole.log(bci.signalBandPower(signal, sampleRate, 'delta', fftSize)); // 85\r\nconsole.log(bci.signalBandPower(signal, sampleRate, 'theta', fftSize)); // 128\r\nconsole.log(bci.signalBandPower(signal, sampleRate, 'alpha', fftSize)); // 205\r\nconsole.log(bci.signalBandPower(signal, sampleRate, 'beta', fftSize));  // 114\r\n```\r\n\r\n### Machine Learning\r\n\r\nCheck out [https://bci.js.org/examples/lda](https://bci.js.org/examples/lda) for a visual demo of how LDA works\r\n\r\n```javascript\r\nconst bci = require('bcijs');\r\n\r\n// Training set\r\nlet class1 = [\r\n\t[0, 0],\r\n\t[1, 2],\r\n\t[2, 2],\r\n\t[1.5, 0.5]\r\n];\r\nlet class2 = [\r\n\t[8, 8],\r\n\t[9, 10],\r\n\t[7, 8],\r\n\t[9, 9]\r\n];\r\n\r\n// Testing set\r\nlet unknownPoints = [\r\n\t[-1, 0],\r\n\t[1.5, 2],\r\n\t[3, 3],\r\n\t[5, 5],\r\n\t[7, 9],\r\n\t[10, 12]\r\n];\r\n\r\n// Learn an LDA classifier\r\nlet ldaParams = bci.ldaLearn(class1, class2);\r\n\r\n// Test classifier\r\nlet predictions = unknownPoints.map(point => {\r\n\treturn Math.sign(bci.ldaProject(ldaParams, point))\r\n});\r\n\r\nconsole.log(predictions); // [ -1, -1, -1, 1, 1, 1 ]\r\n```\r\n\r\n### Data Manipulation and Feature Extraction\r\n\r\n```javascript\r\nconst bci = require('bcijs');\r\n\r\n// Some random numbers\r\nlet data = [3, 2, 3, 0, 4, 0, 0, 5, 4, 0];\r\n\r\n// Partition into training and testing sets\r\nlet [training, testing] = bci.partition(data, 0.6, 0.4);\r\n\r\nconsole.log(training); // [3, 2, 3, 0, 4, 0]\r\nconsole.log(testing); // [0, 5, 4, 0]\r\n\r\n// Traverse the data array with windows of size 3 and a step of 2 (overlap of 1 item per window)\r\nbci.windowApply(data, window => console.log(window), 3, 2);\r\n/*\r\n[ 3, 2, 3 ]\r\n[ 3, 0, 4 ]\r\n[ 4, 0, 0 ]\r\n[ 0, 5, 4 ]\r\n*/\r\n\r\n// Find the log of the variance of these windows (feature extraction)\r\nlet features = bci.windowApply(data, bci.features.logvar, 3, 2);\r\nconsole.log(features); // [-1.099, 1.466, 1.674, 1.946]\r\n\r\n// Colon notation for array subscripting\r\nlet arr = [\r\n  [1, 2, 3],\r\n  [4, 5, 6],\r\n  [7, 8, 9]\r\n];\r\nlet subarr = bci.subscript(arr, '1 3', '2:3'); // rows 1 and 3, columns 2 through 3\r\nconsole.log(subarr);\r\n/*\r\n[[2, 3],\r\n [8, 9]]\r\n*/\r\n```\r\n\r\n## Usage in the web\r\n\r\nBCI.js can be loaded from the jsDelivr CDN with\r\n\r\n```html\r\n<script src=\"https://cdn.jsdelivr.net/npm/bcijs@1.5.1/dist/bci.min.js\"></script>\r\n```\r\n\r\nYou can also find `bci.js` and `bci.min.js` in the [/dist](https://github.com/pwstegman/bcijs/tree/master/dist) directory.\r\n\r\nBCI.js methods are accessible via the global object `bci`.\r\n\r\nIf building a web distributable using a tool such as browserify or webpack, require `bcijs/browser.js` to load only methods that are browser compatible. Node.js specific methods such as networking and file system methods will not be included.\r\n\r\n```javascript\r\nconst bci = require('bcijs/browser.js');\r\n```\r\n\r\n## Requiring specific methods\r\n\r\nYou can require specific methods as well. For example, if you only need fastICA, you can use\r\n\r\n```javascript\r\nconst fastICA = require('bcijs/lib/math/fastICA.js');\r\n```\r\n\r\nBCI.js methods can be found in the [lib/](https://github.com/pwstegman/bcijs/tree/master/lib) directory.\r\n\r\n## Documentation\r\n\r\nDocumentation can be found at [https://bci.js.org](https://bci.js.org) or by viewing [docs/api.md](https://github.com/pwstegman/bcijs/blob/master/docs/api.md)\r\n\r\n## Examples\r\n\r\nMore examples can be found in the [examples](https://github.com/pwstegman/bcijs/tree/master/examples) directory\r\n\r\n## Building\r\n\r\nSee [dev.md](dev.md) for info on how to modify and build bci.js\r\n\r\n## Reference\r\n\r\nIf you use bci.js in a published work, please reference this paper\r\n\r\nP. Stegman, C. Crawford, and J. Gray, \"WebBCI: An Electroencephalography Toolkit Built on Modern Web Technologies,\" in Augmented Cognition: Intelligent Technologies, 2018, pp. 212â€“221.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pwstegman/bcijs.git"
  },
  "scripts": {
    "build": "gulp build",
    "dist": "gulp dist",
    "docs": "npm run docs-html && npm run docs-md",
    "docs-html": "gulp docs-html",
    "docs-md": "gulp docs-md",
    "prepublishOnly": "npm run build && npm run dist && npm run test && npm run docs",
    "test": "nyc mocha --require ./test/tests/node-config.js --reporter min \"test/tests/**/*.test.js\"",
    "test-dist": "gulp test-dist"
  },
  "version": "1.5.1"
}
