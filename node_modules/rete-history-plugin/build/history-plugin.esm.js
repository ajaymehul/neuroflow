/*!
* rete-history-plugin v0.1.2 
* (c) 2019  
* Released under the ISC license.
*/
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

var History =
/*#__PURE__*/
function () {
  function History() {
    _classCallCheck(this, History);

    this.active = false;
    this.produced = [];
    this.reserved = [];
  }

  _createClass(History, [{
    key: "add",
    value: function add(action) {
      if (this.active) return;
      this.produced.push(action);
      this.reserved = [];
    }
  }, {
    key: "_do",
    value: function _do(from, to, type) {
      var action = from.pop();
      if (!action) return;
      this.active = true;
      action[type]();
      to.push(action);
      this.active = false;
    }
  }, {
    key: "undo",
    value: function undo() {
      this._do(this.produced, this.reserved, 'undo');
    }
  }, {
    key: "redo",
    value: function redo() {
      this._do(this.reserved, this.produced, 'redo');
    }
  }]);

  return History;
}();

var Action =
/*#__PURE__*/
function () {
  function Action() {
    _classCallCheck(this, Action);
  }

  _createClass(Action, [{
    key: "undo",
    value: function undo() {}
  }, {
    key: "redo",
    value: function redo() {}
  }]);

  return Action;
}();

var AddNodeAction =
/*#__PURE__*/
function (_Action) {
  _inherits(AddNodeAction, _Action);

  function AddNodeAction(editor, node) {
    var _this;

    _classCallCheck(this, AddNodeAction);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddNodeAction).call(this));
    _this.editor = editor;
    _this.node = node;
    return _this;
  }

  _createClass(AddNodeAction, [{
    key: "undo",
    value: function undo() {
      this.editor.removeNode(this.node);
    }
  }, {
    key: "redo",
    value: function redo() {
      this.editor.addNode(this.node);
    }
  }]);

  return AddNodeAction;
}(Action);
var RemoveNodeAction =
/*#__PURE__*/
function (_Action2) {
  _inherits(RemoveNodeAction, _Action2);

  function RemoveNodeAction(editor, node) {
    var _this2;

    _classCallCheck(this, RemoveNodeAction);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(RemoveNodeAction).call(this));
    _this2.editor = editor;
    _this2.node = node;
    return _this2;
  }

  _createClass(RemoveNodeAction, [{
    key: "undo",
    value: function undo() {
      this.editor.addNode(this.node);
    }
  }, {
    key: "redo",
    value: function redo() {
      this.editor.removeNode(this.node);
    }
  }]);

  return RemoveNodeAction;
}(Action);

function reassign(connection) {
  var input = connection.input,
      output = connection.output;
  return output.connections.find(function (c) {
    return c.input === input;
  });
}

var AddConnectionAction =
/*#__PURE__*/
function (_Action) {
  _inherits(AddConnectionAction, _Action);

  function AddConnectionAction(editor, connection) {
    var _this;

    _classCallCheck(this, AddConnectionAction);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddConnectionAction).call(this));
    _this.editor = editor;
    _this.connection = connection;
    return _this;
  }

  _createClass(AddConnectionAction, [{
    key: "undo",
    value: function undo() {
      this.editor.removeConnection(this.connection);
    }
  }, {
    key: "redo",
    value: function redo() {
      this.editor.connect(this.connection.output, this.connection.input);
      this.connection = reassign(this.connection);
    }
  }]);

  return AddConnectionAction;
}(Action);
var RemoveConnectionAction =
/*#__PURE__*/
function (_Action2) {
  _inherits(RemoveConnectionAction, _Action2);

  function RemoveConnectionAction(editor, connection) {
    var _this2;

    _classCallCheck(this, RemoveConnectionAction);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(RemoveConnectionAction).call(this));
    _this2.editor = editor;
    _this2.connection = connection;
    return _this2;
  }

  _createClass(RemoveConnectionAction, [{
    key: "undo",
    value: function undo() {
      this.editor.connect(output, input);
      this.connection = reassign(this.connection);
    }
  }, {
    key: "redo",
    value: function redo() {
      this.editor.removeConnection(this.connection);
    }
  }]);

  return RemoveConnectionAction;
}(Action);

function install(editor, _ref) {
  var _ref$keyboard = _ref.keyboard,
      keyboard = _ref$keyboard === void 0 ? true : _ref$keyboard;
  editor.bind('undo');
  editor.bind('redo');
  editor.bind('addhistory');
  var history = new History();
  editor.on('undo', function () {
    return history.undo();
  });
  editor.on('redo', function () {
    return history.redo();
  });
  editor.on('addhistory', function (action) {
    return history.add(action);
  });
  editor.on('nodecreated', function (node) {
    return history.add(new AddNodeAction(editor, node));
  });
  editor.on('noderemoved', function (node) {
    return history.add(new RemoveNodeAction(editor, node));
  });
  editor.on('connectioncreated', function (c) {
    return history.add(new AddConnectionAction(editor, c));
  });
  editor.on('connectionremoved', function (c) {
    return history.add(new RemoveConnectionAction(editor, c));
  });
  if (keyboard) document.addEventListener('keydown', function (e) {
    if (!e.ctrlKey) return;

    switch (e.code) {
      case 'KeyZ':
        editor.trigger('undo');
        break;

      case 'KeyY':
        editor.trigger('redo');
        break;
    }
  });
}

var index = {
  name: 'history',
  install: install,
  Action: Action
};

export default index;
//# sourceMappingURL=history-plugin.esm.js.map
